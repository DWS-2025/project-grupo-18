package es.grupo18.jobmatcher.repository;

import es.grupo18.jobmatcher.model.News;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;
import org.springframework.stereotype.Repository;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Repository
public class FileNewsRepository {

    private final ObjectMapper mapper;
    private final File file = new File("src/main/resources/static/data/noticias.json");
    private List<News> newsList;

    public FileNewsRepository() {
        mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
        newsList = new ArrayList<>();
        loadNews();
    }

    private void loadNews() {
        if (file.exists()) {
            try {
                List<News> loadedNews = mapper.readValue(file, new TypeReference<List<News>>() {});
                if (loadedNews != null) {
                    newsList = loadedNews;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void saveNews() {
        try {
            file.getParentFile().mkdirs();
            List<News> currentNews = new ArrayList<>(newsList); // Crear una copia de la lista actual
            mapper.writerWithDefaultPrettyPrinter().writeValue(file, currentNews);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Genera un id secuencial, comenzando en 0
    private Long generateNewId() {
        if (newsList.isEmpty()) {
            return 0L;
        } else {
            return newsList.stream()
                    .map(News::getId)
                    .filter(id -> id != null)
                    .max(Comparator.naturalOrder())
                    .orElse(-1L) + 1;
        }
    }

    public News save(News news) {
        // Para prevenir sobrescribir la lista, recargamos el contenido desde el archivo
        loadNews();

        // Si el id es null, se asigna un id secuencial
        if (news.getId() == null) {
            Long newId = generateNewId();
            news.setId(newId);
        }
        newsList.add(news); // AÃ±adir la nueva noticia
        saveNews(); // Guardar toda la lista
        return news;
    }

    public News findById(Long id) {
        return newsList.stream()
            .filter(n -> n.getId().equals(id))
            .findFirst()
            .orElse(null);
    }

    public List<News> findAll() {
        return newsList;
    }
}